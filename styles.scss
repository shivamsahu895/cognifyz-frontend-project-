// Task 8: CSS Preprocessing with Sass
// This file demonstrates advanced CSS preprocessing techniques

// Variables for consistent theming
$primary-color: #007bff;
$secondary-color: #ff6b35;
$accent-color: #f7931e;
$dark-color: #2c3e50;
$light-color: #ecf0f1;
$text-color: #7f8c8d;
$success-color: #27ae60;
$danger-color: #e74c3c;

// Typography variables
$font-family-base: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
$font-size-base: 1rem;
$font-weight-normal: 400;
$font-weight-bold: 700;
$line-height-base: 1.6;

// Spacing variables
$spacer: 1rem;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3
);

// Border radius variables
$border-radius-sm: 0.375rem;
$border-radius: 0.5rem;
$border-radius-lg: 0.75rem;
$border-radius-xl: 1rem;

// Box shadow variables
$box-shadow-sm: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
$box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
$box-shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);

// Transition variables
$transition-base: all 0.3s ease-in-out;
$transition-fade: opacity 0.15s linear;
$transition-collapse: height 0.35s ease;

// Breakpoints
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// Mixins for reusable styles
@mixin button-variant($background, $border: $background, $hover-background: darken($background, 7.5%)) {
  color: #fff;
  background-color: $background;
  border-color: $border;
  
  &:hover {
    background-color: $hover-background;
    border-color: darken($border, 10%);
    transform: translateY(-2px);
  }
  
  &:focus {
    box-shadow: 0 0 0 0.2rem rgba($background, 0.5);
  }
  
  &:active {
    background-color: darken($background, 10%);
    border-color: darken($border, 12.5%);
  }
}

@mixin media-breakpoint-up($name) {
  $min: map-get($breakpoints, $name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name) {
  $max: map-get($breakpoints, $name) - 0.02;
  @media (max-width: $max) {
    @content;
  }
}

@mixin gradient-background($start-color, $end-color, $direction: 135deg) {
  background: linear-gradient($direction, $start-color 0%, $end-color 100%);
}

@mixin card-hover-effect() {
  transition: $transition-base;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: $box-shadow-lg;
  }
}

@mixin text-gradient($start-color, $end-color) {
  background: linear-gradient(45deg, $start-color, $end-color);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

// Functions
@function color-contrast($background) {
  $color-brightness: round((red($background) * 299) + (green($background) * 587) + (blue($background) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  
  @if abs($color-brightness) < ($light-color/2) {
    @return #ffffff;
  } @else {
    @return #000000;
  }
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// Base styles using Sass features
body {
  font-family: $font-family-base;
  font-size: $font-size-base;
  font-weight: $font-weight-normal;
  line-height: $line-height-base;
  color: $text-color;
  
  // Nested media queries
  @include media-breakpoint-down(md) {
    font-size: $font-size-base * 0.9;
  }
}

// Component styles with nesting
.cognifyz-navbar {
  background-color: $primary-color;
  box-shadow: $box-shadow;
  
  .navbar-brand {
    font-weight: $font-weight-bold;
    color: $secondary-color;
    
    &:hover {
      color: lighten($secondary-color, 10%);
    }
  }
  
  .nav-link {
    color: rgba(255, 255, 255, 0.9);
    transition: $transition-base;
    
    &:hover,
    &:focus {
      color: $secondary-color;
      transform: translateY(-1px);
    }
    
    &.active {
      color: $secondary-color;
      font-weight: $font-weight-bold;
    }
  }
}

// Hero section with advanced Sass features
.cognifyz-hero {
  @include gradient-background($primary-color, darken($primary-color, 20%));
  min-height: 100vh;
  display: flex;
  align-items: center;
  position: relative;
  
  // Pseudo-element for overlay
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
  }
  
  .hero-content {
    position: relative;
    z-index: 2;
    
    h1 {
      @include text-gradient($secondary-color, $accent-color);
      font-weight: $font-weight-bold;
      margin-bottom: map-get($spacers, 4);
      
      @include media-breakpoint-down(md) {
        font-size: 2.5rem;
      }
      
      @include media-breakpoint-down(sm) {
        font-size: 2rem;
      }
    }
    
    .lead {
      color: rgba(255, 255, 255, 0.9);
      margin-bottom: map-get($spacers, 4);
    }
  }
}

// Button components using mixins
.btn-cognifyz {
  &-primary {
    @include button-variant($primary-color);
  }
  
  &-secondary {
    @include button-variant($secondary-color);
  }
  
  &-gradient {
    @include gradient-background($secondary-color, $accent-color);
    border: none;
    color: white;
    transition: $transition-base;
    
    &:hover {
      @include gradient-background($accent-color, $secondary-color);
      transform: translateY(-3px);
      box-shadow: 0 10px 25px rgba($secondary-color, 0.4);
    }
  }
}

// Card components with nesting and mixins
.cognifyz-card {
  border: none;
  border-radius: $border-radius-lg;
  overflow: hidden;
  @include card-hover-effect();
  
  .card-header {
    background: $light-color;
    border-bottom: 1px solid rgba($dark-color, 0.1);
    
    .card-title {
      color: $dark-color;
      font-weight: $font-weight-bold;
      margin-bottom: 0;
    }
  }
  
  .card-body {
    padding: map-get($spacers, 4);
    
    .card-text {
      color: $text-color;
      line-height: $line-height-base * 1.2;
    }
  }
  
  // Variant cards
  &.card-primary {
    border-left: 4px solid $primary-color;
    
    .card-header {
      background: rgba($primary-color, 0.1);
    }
  }
  
  &.card-success {
    border-left: 4px solid $success-color;
    
    .card-header {
      background: rgba($success-color, 0.1);
    }
  }
  
  &.card-danger {
    border-left: 4px solid $danger-color;
    
    .card-header {
      background: rgba($danger-color, 0.1);
    }
  }
}

// Form components with advanced styling
.cognifyz-form {
  .form-group {
    margin-bottom: map-get($spacers, 3);
    
    .form-label {
      color: $dark-color;
      font-weight: 600;
      margin-bottom: map-get($spacers, 2);
    }
    
    .form-control {
      border: 2px solid rgba($dark-color, 0.1);
      border-radius: $border-radius;
      padding: map-get($spacers, 3);
      transition: $transition-base;
      
      &:focus {
        border-color: $primary-color;
        box-shadow: 0 0 0 0.2rem rgba($primary-color, 0.25);
        transform: translateY(-2px);
      }
      
      &.is-valid {
        border-color: $success-color;
        
        &:focus {
          box-shadow: 0 0 0 0.2rem rgba($success-color, 0.25);
        }
      }
      
      &.is-invalid {
        border-color: $danger-color;
        
        &:focus {
          box-shadow: 0 0 0 0.2rem rgba($danger-color, 0.25);
        }
      }
    }
    
    .form-text {
      color: $text-color;
      font-size: $font-size-base * 0.875;
    }
  }
}

// API data section
.api-section {
  .api-card {
    @include card-hover-effect();
    border-radius: $border-radius-lg;
    
    .badge {
      background: $primary-color;
      color: white;
      border-radius: $border-radius-xl;
    }
    
    .card-title {
      color: $dark-color;
      font-weight: $font-weight-bold;
      line-height: 1.3;
    }
    
    .card-text {
      color: $text-color;
      font-size: $font-size-base * 0.95;
    }
  }
}

// Utility classes using loops and maps
@each $name, $size in $spacers {
  .m-#{$name} { margin: $size !important; }
  .mt-#{$name} { margin-top: $size !important; }
  .mb-#{$name} { margin-bottom: $size !important; }
  .ml-#{$name} { margin-left: $size !important; }
  .mr-#{$name} { margin-right: $size !important; }
  .mx-#{$name} { 
    margin-left: $size !important; 
    margin-right: $size !important; 
  }
  .my-#{$name} { 
    margin-top: $size !important; 
    margin-bottom: $size !important; 
  }
  
  .p-#{$name} { padding: $size !important; }
  .pt-#{$name} { padding-top: $size !important; }
  .pb-#{$name} { padding-bottom: $size !important; }
  .pl-#{$name} { padding-left: $size !important; }
  .pr-#{$name} { padding-right: $size !important; }
  .px-#{$name} { 
    padding-left: $size !important; 
    padding-right: $size !important; 
  }
  .py-#{$name} { 
    padding-top: $size !important; 
    padding-bottom: $size !important; 
  }
}

// Color utilities
$colors: (
  'primary': $primary-color,
  'secondary': $secondary-color,
  'success': $success-color,
  'danger': $danger-color,
  'dark': $dark-color,
  'light': $light-color
);

@each $name, $color in $colors {
  .text-#{$name} {
    color: $color !important;
  }
  
  .bg-#{$name} {
    background-color: $color !important;
    color: color-contrast($color) !important;
  }
  
  .border-#{$name} {
    border-color: $color !important;
  }
}

// Animation utilities
.fade-in {
  animation: fadeIn 0.8s ease-out;
}

.slide-up {
  animation: slideUp 0.6s ease-out;
}

.bounce-in {
  animation: bounceIn 0.8s ease-out;
}

// Keyframes
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes bounceIn {
  0%, 20%, 40%, 60%, 80% {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }
  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }
  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
  }
  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }
  to {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

// Responsive typography
@include media-breakpoint-up(lg) {
  .display-1 { font-size: 6rem; }
  .display-2 { font-size: 5.5rem; }
  .display-3 { font-size: 4.5rem; }
  .display-4 { font-size: 3.5rem; }
}

@include media-breakpoint-down(md) {
  .display-1 { font-size: 4rem; }
  .display-2 { font-size: 3.5rem; }
  .display-3 { font-size: 3rem; }
  .display-4 { font-size: 2.5rem; }
}

@include media-breakpoint-down(sm) {
  .display-1 { font-size: 3rem; }
  .display-2 { font-size: 2.5rem; }
  .display-3 { font-size: 2rem; }
  .display-4 { font-size: 1.75rem; }
}

// Print styles
@media print {
  .cognifyz-navbar,
  .btn,
  .api-section {
    display: none !important;
  }
  
  body {
    font-size: 12pt;
    line-height: 1.4;
    color: black !important;
  }
  
  .cognifyz-hero {
    background: white !important;
    color: black !important;
  }
}

// Dark theme support
@media (prefers-color-scheme: dark) {
  body {
    background-color: #1a1a1a;
    color: #e0e0e0;
  }
  
  .cognifyz-card {
    background-color: #2c2c2c;
    color: #e0e0e0;
  }
  
  .form-control {
    background-color: #2c2c2c;
    border-color: #444;
    color: #e0e0e0;
    
    &:focus {
      background-color: #333;
      border-color: $primary-color;
    }
  }
}

// High contrast mode
@media (prefers-contrast: high) {
  .btn {
    border: 2px solid;
  }
  
  .cognifyz-card {
    border: 2px solid;
  }
  
  .form-control {
    border-width: 3px;
  }
}

// Reduced motion preferences
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}